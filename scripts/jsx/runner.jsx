// @ts-nocheck
#target photoshop
app.displayDialogs = DialogModes.NO;

/*
  runner.jsx
  - Loads work/package.json (produced by Python pre-processor)
  - Defensive path resolution (relative to this script), with file-picker fallback
  - Logs package summary; exposes global _PS_PACKAGE for later phases
*/

(function () {
  function readFileUtf8(pathOrFile) {
    var f = (typeof pathOrFile === "string") ? new File(pathOrFile) : pathOrFile;
    if (!f || !f.exists) throw new Error("File not found: " + (f ? f.fsName : pathOrFile));
    f.encoding = "UTF-8";
    if (!f.open("r")) throw new Error("Cannot open file: " + f.fsName);
    var txt = f.read();
    f.close();
    // strip BOM
    if (txt && txt.charCodeAt(0) === 0xFEFF) txt = txt.substring(1);
    return txt;
  }

  function resolvePackagePathRelative() {
    // Expected layout: repo/scripts/jsx/runner.jsx  -> repo/work/package.json
    try {
      if ($.fileName && $.fileName.length) {
        var scriptFile = new File($.fileName);
        var scriptFolder = scriptFile.parent;                // .../scripts/jsx
        var repoRoot = scriptFolder.parent.parent;          // .../ (repo root)
        var candidate = new File(repoRoot + "/work/package.json");
        return candidate;
      }
    } catch (e) {
      // fall through to dialog
    }
    return null;
  }

  try {
    var pkgFile = resolvePackagePathRelative();
    if (!pkgFile || !pkgFile.exists) {
      // fallback: ask user to pick the package.json
      pkgFile = File.openDialog("Select work/package.json (generated by Python)");
      if (!pkgFile) throw new Error("No package.json selected.");
    }

    $.writeln("Runner: Using package file -> " + pkgFile.fsName);
    var raw = readFileUtf8(pkgFile);
    var pkg = JSON.parse(raw);

    if (!pkg.rows || !(pkg.rows instanceof Array)) throw new Error("Invalid package.json: missing 'rows' array");

    $.writeln("Runner: packageVersion = " + pkg.packageVersion + ", rows = " + pkg.rows.length);

    if (pkg.rows.length > 0) {
      var r0 = pkg.rows[0];
      $.writeln("Runner: first rowIndex = " + r0.rowIndex);
      $.writeln("Runner: data keys = " + Object.keys(r0.data).join(", "));
      $.writeln("Runner: mappings count = " + r0.mappings.length);
      for (var i = 0; i < Math.min(6, r0.mappings.length); i++) {
        var m = r0.mappings[i];
        $.writeln("  mapping[" + i + "]: layerName='" + m.layerName + "', columnName='" + m.columnName + "', layerType='" + m.layerType + "', value='" + m.value + "'");
      }
    }

    // Expose package for subsequent phases (layer operations)
    this._PS_PACKAGE = pkg;
    alert("Runner: package.json loaded OK. See ESTK/JS Console for details.");
  } catch (err) {
    alert("Runner ERROR: " + err.toString());
    $.writeln("Runner ERROR: " + err.toString());
    throw err;
  }
})();
